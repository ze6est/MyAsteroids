//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.3
//     from Assets/MyAsteroids/CodeBase/Inputs/InputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputActions"",
    ""maps"": [
        {
            ""name"": ""ShipInput"",
            ""id"": ""cc78083b-137b-4acf-83b5-4f03b97afe74"",
            ""actions"": [
                {
                    ""name"": ""Moved"",
                    ""type"": ""Button"",
                    ""id"": ""8e8a7d42-f25f-4f47-ada8-26bcda2de928"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""LookTo"",
                    ""type"": ""Value"",
                    ""id"": ""76b9d228-f0d6-4ad2-8506-16b99ac36406"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""BulletShooted"",
                    ""type"": ""Button"",
                    ""id"": ""8139fe75-4f76-4a8e-b42e-ee1d9172e692"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LaserShooted"",
                    ""type"": ""Button"",
                    ""id"": ""623ad0a7-ae9a-4d9a-87d1-ccb476bdcd95"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""8585286c-35f5-46df-ae43-a1881e08049f"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LookTo"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""93d4f8c6-982f-42f6-9936-a91b19ff01f6"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Moved"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""35a08cb1-b522-4bd9-a0a7-4638d652600b"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Moved"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7dcc0176-0b0d-448d-849e-e8b0c30876cd"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""BulletShooted"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""93237be1-dea5-4e2c-ad55-50e38bd3fd4c"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LaserShooted"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // ShipInput
        m_ShipInput = asset.FindActionMap("ShipInput", throwIfNotFound: true);
        m_ShipInput_Moved = m_ShipInput.FindAction("Moved", throwIfNotFound: true);
        m_ShipInput_LookTo = m_ShipInput.FindAction("LookTo", throwIfNotFound: true);
        m_ShipInput_BulletShooted = m_ShipInput.FindAction("BulletShooted", throwIfNotFound: true);
        m_ShipInput_LaserShooted = m_ShipInput.FindAction("LaserShooted", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // ShipInput
    private readonly InputActionMap m_ShipInput;
    private List<IShipInputActions> m_ShipInputActionsCallbackInterfaces = new List<IShipInputActions>();
    private readonly InputAction m_ShipInput_Moved;
    private readonly InputAction m_ShipInput_LookTo;
    private readonly InputAction m_ShipInput_BulletShooted;
    private readonly InputAction m_ShipInput_LaserShooted;
    public struct ShipInputActions
    {
        private @InputActions m_Wrapper;
        public ShipInputActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Moved => m_Wrapper.m_ShipInput_Moved;
        public InputAction @LookTo => m_Wrapper.m_ShipInput_LookTo;
        public InputAction @BulletShooted => m_Wrapper.m_ShipInput_BulletShooted;
        public InputAction @LaserShooted => m_Wrapper.m_ShipInput_LaserShooted;
        public InputActionMap Get() { return m_Wrapper.m_ShipInput; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ShipInputActions set) { return set.Get(); }
        public void AddCallbacks(IShipInputActions instance)
        {
            if (instance == null || m_Wrapper.m_ShipInputActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_ShipInputActionsCallbackInterfaces.Add(instance);
            @Moved.started += instance.OnMoved;
            @Moved.performed += instance.OnMoved;
            @Moved.canceled += instance.OnMoved;
            @LookTo.started += instance.OnLookTo;
            @LookTo.performed += instance.OnLookTo;
            @LookTo.canceled += instance.OnLookTo;
            @BulletShooted.started += instance.OnBulletShooted;
            @BulletShooted.performed += instance.OnBulletShooted;
            @BulletShooted.canceled += instance.OnBulletShooted;
            @LaserShooted.started += instance.OnLaserShooted;
            @LaserShooted.performed += instance.OnLaserShooted;
            @LaserShooted.canceled += instance.OnLaserShooted;
        }

        private void UnregisterCallbacks(IShipInputActions instance)
        {
            @Moved.started -= instance.OnMoved;
            @Moved.performed -= instance.OnMoved;
            @Moved.canceled -= instance.OnMoved;
            @LookTo.started -= instance.OnLookTo;
            @LookTo.performed -= instance.OnLookTo;
            @LookTo.canceled -= instance.OnLookTo;
            @BulletShooted.started -= instance.OnBulletShooted;
            @BulletShooted.performed -= instance.OnBulletShooted;
            @BulletShooted.canceled -= instance.OnBulletShooted;
            @LaserShooted.started -= instance.OnLaserShooted;
            @LaserShooted.performed -= instance.OnLaserShooted;
            @LaserShooted.canceled -= instance.OnLaserShooted;
        }

        public void RemoveCallbacks(IShipInputActions instance)
        {
            if (m_Wrapper.m_ShipInputActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IShipInputActions instance)
        {
            foreach (var item in m_Wrapper.m_ShipInputActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_ShipInputActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public ShipInputActions @ShipInput => new ShipInputActions(this);
    public interface IShipInputActions
    {
        void OnMoved(InputAction.CallbackContext context);
        void OnLookTo(InputAction.CallbackContext context);
        void OnBulletShooted(InputAction.CallbackContext context);
        void OnLaserShooted(InputAction.CallbackContext context);
    }
}
